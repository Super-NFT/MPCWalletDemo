package com.go23wallet.mpcwalletdemo.wallet

import android.content.Intent
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import com.blankj.utilcode.constant.PermissionConstants
import com.blankj.utilcode.util.PermissionUtils
import com.coins.app.BaseCallBack
import com.coins.app.Go23WalletManage
import com.coins.app.bean.Sign
import com.coins.app.bean.transaction.PreTokenSend
import com.coins.app.bean.transaction.PreTokenSendResponse
import com.coins.app.manage.Go23WalletTransactionManage
import com.coins.app.ui.gamecenter.ApproveDialog
import com.go23wallet.mpcwalletdemo.R
import com.go23wallet.mpcwalletdemo.base.BaseActivity
import com.go23wallet.mpcwalletdemo.data.ChainTokenInfo
import com.go23wallet.mpcwalletdemo.databinding.ActivitySendCoinBinding
import com.go23wallet.mpcwalletdemo.dialog.SelectTokenSendDialog
import com.go23wallet.mpcwalletdemo.dialog.SendCoinResultDialog
import com.go23wallet.mpcwalletdemo.utils.CopyUtils
import com.go23wallet.mpcwalletdemo.utils.GlideUtils
import com.go23wallet.mpcwalletdemo.utils.UserWalletInfoManager
import com.google.gson.Gson
import com.google.zxing.activity.CaptureActivity


class SendCoinActivity : BaseActivity<ActivitySendCoinBinding>() {

    private val selectTokenSendDialog: SelectTokenSendDialog by lazy {
        SelectTokenSendDialog(this)
    }

    override val layoutRes: Int = R.layout.activity_send_coin

    private var isSelectGas = true

    private var tokenId = 0
    private var chainTokenInfo: ChainTokenInfo? = null
    private var preTokenSend: PreTokenSend? = null

    private var sendCoinResultDialog: SendCoinResultDialog? = null

    override fun initViews(savedInstanceState: Bundle?) {
        tokenId = intent.getIntExtra("token_id", 0)
        chainTokenInfo = intent.getParcelableExtra("data")
        if (chainTokenInfo == null) {
            finish()
            return
        }
        initData()
        setListener()
    }

    private fun initData() {
        chainTokenInfo?.let {
            GlideUtils.loadImg(this, it.imgUrl, binding.ivCoinIcon)
            binding.tvCoinName.text = it.name
            binding.tvFromCoinNickname.text = it.symbol
            Go23WalletTransactionManage.getInstance().requestPreTokenSend(
                tokenId,
                it.blockChainId,
                it.addr,
                object : BaseCallBack<PreTokenSendResponse> {
                    override fun success(data: PreTokenSendResponse?) {
                        data?.data?.let { preToken ->
                            preTokenSend = preToken
                            binding.etInputNum.setText("0.00")
                            binding.etToAddress.setText("")
                            binding.tvGasTips.text =
                                String.format(getString(R.string.gas_tips), chainTokenInfo?.symbol)
                            binding.tvGasTips.visibility =
                                if (preToken.isIs_lending_gas) View.VISIBLE else View.GONE
                            binding.tvFromAddress.text = it.addr
                            binding.tvAvailable.text =
                                String.format(
                                    getString(R.string.available),
                                    "${if (tokenId == 0) preToken.platform_balance_sort else preToken.token_balance_sort} ${it.symbol}"
                                )
                            binding.tvCoinSymbol.text = it.symbol
                            binding.tvGasBalance.text = "${preToken.gas} ${it.symbol}"
                            binding.tvGasValue.text =
                                "=$${preToken.platform_u_per * (preToken.gas ?: "0.00").toDouble()}"
                        }
                    }

                    override fun failed() {
                    }
                })
        }
    }

    private fun setListener() {
        val registerResult = registerForActivityResult(
            ActivityResultContracts.StartActivityForResult()
        ) {
            val data = it.data?.getStringExtra("result") ?: ""
            binding.etToAddress.setText(data)
        }
        binding.ivBack.setOnClickListener {
            finish()
        }
        selectTokenSendDialog.callback = {
            tokenId = it.token_id
            chainTokenInfo =
                ChainTokenInfo(
                    it.block_chain_id,
                    UserWalletInfoManager.getUserWalletInfo().walletAddress,
                    it.name,
                    it.symbol,
                    it.image_url,
                    it.addr,
                )
            initData()
        }

        binding.vCoinType.setOnClickListener {
            selectTokenSendDialog.show(supportFragmentManager, "selectTokenSendDialog")
        }
        binding.etInputNum.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
            }

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
            }

            override fun afterTextChanged(s: Editable?) {
                if (s.isNullOrEmpty()) {
                    binding.tvTotalValue.text = ""
                    binding.tvInputValue.text = ""
                    binding.tvSend.isEnabled = false
                    return
                }
                val num = s.toString().toDouble()

                val uPer = if (tokenId == 0) {
                    preTokenSend?.platform_u_per
                } else {
                    preTokenSend?.token_u_per
                }
                binding.tvInputValue.text = if (uPer == null || uPer <= 0) "" else "=$${num * uPer}"

                updateSendStatus()
            }
        })
        binding.tvPaste.setOnClickListener {
            CopyUtils.pasteText(this, binding.etToAddress)
        }
        binding.tvAll.setOnClickListener {
            preTokenSend?.let {
                val availableNum =
                    if (tokenId == 0) it.platform_balance_sort else it.token_balance_sort
                val num = availableNum * (1 - it.fee)
                binding.etInputNum.setText("$num")
            }
        }
        binding.ivClear.setOnClickListener {
            binding.etInputNum.setText("0.00")
        }
        binding.ivScanCode.setOnClickListener {
            PermissionUtils.permission(PermissionConstants.CAMERA)
                .callback(object : PermissionUtils.SimpleCallback {
                    override fun onGranted() {
                        try {
                            registerResult.launch(
                                Intent(
                                    this@SendCoinActivity,
                                    CaptureActivity::class.java
                                )
                            )
                        } catch (ignored: Exception) {
                            Toast.makeText(
                                this@SendCoinActivity,
                                getString(R.string.request_camera_permission_fail),
                                Toast.LENGTH_SHORT
                            ).show()
                        }
                    }

                    override fun onDenied() {
                        Toast.makeText(
                            this@SendCoinActivity,
                            getString(R.string.request_camera_permission_fail),
                            Toast.LENGTH_SHORT
                        ).show()

                    }
                }).request()
        }
        binding.tvGasTips.setOnClickListener {
            isSelectGas = !isSelectGas
            binding.tvGasTips.setCompoundDrawablesRelativeWithIntrinsicBounds(
                if (isSelectGas) R.drawable.icon_checked else R.drawable.icon_uncheck,
                0,
                0,
                0
            )
            updateSendStatus()
        }
        binding.tvSend.setOnClickListener {
            preTokenSend?.let {
                if (it.trans_type == 4) {
                    Go23WalletManage.getInstance().showApproveDialog(
                        this,
                        supportFragmentManager,
                        "approveDialog",
                        object : ApproveDialog.CallBack {
                            override fun approve() {
                                toSign(it)
                            }

                            override fun cancel() {
                            }
                        })
                } else {
                    toSign(it)
                }
            }
        }
    }

    private fun toSign(data: PreTokenSend) {
        val sign = Sign()
        val key1 =
            "{\"PaillierSK\":{\"N\":24326962348129444257903289709340209852956589208776769867346317647942302963898651566643785483036770962482702821230303697170627267174171307434716036965930556402408783406195990771671848350840673435291850723668018371437371380621806892528188913667777057292071480648528413968483561154297572396164576642470591931675056556378492219115608082372949002998327378156754457439898141538226717523618421222426306150940297245504115975978070857900123512676631463689979252040750833990896544004803836943344500562645522744868277752560521669403067405800829302450997818037247944441288611716201623933713901839918688537912219460984458346200173,\"LambdaN\":12163481174064722128951644854670104926478294604388384933673158823971151481949325783321892741518385481241351410615151848585313633587085653717358018482965278201204391703097995385835924175420336717645925361834009185718685690310903446264094456833888528646035740324264206984241780577148786198082288321235295965837371803553693186165963102189313077824983361947342231088702119260734480807533151992746925122785631333054439566110777860816261626722199410245351940207587139994296987540376905429840183171847311130529648520291461746412497243007471523313929676157404233902235610835221270968339526936260758476432562162591220446544414,\"PhiN\":24326962348129444257903289709340209852956589208776769867346317647942302963898651566643785483036770962482702821230303697170627267174171307434716036965930556402408783406195990771671848350840673435291850723668018371437371380621806892528188913667777057292071480648528413968483561154297572396164576642470591931674743607107386372331926204378626155649966723894684462177404238521468961615066303985493850245571262666108879132221555721632523253444398820490703880415174279988593975080753810859680366343694622261059297040582923492824994486014943046627859352314808467804471221670442541936679053872521516952865124325182440893088828},\"NTildei\":19556565008757318464194949480311209555878438371452206912307416756797636354416428370447936405388853302453426547303433877562432677540584202278616683676372548028863135601770435043302661145728533543998261615175416406282419406983259997564493983740013682617001839950241119463563380736760144786460822697960100706950076537141567252741516113958062287654036048849775342981752891915070525974031257607671577252867199978322171706574624638675430462209031089779845191013197421928441371584857803758995040295111761186109566076977916022372020418620892253559722608926889857101643429190887687736088287643100026292896346201527680560914921,\"H1i\":5689956253672088159927439642440946065254368885886998836245333665584316970614135492685793985447694603043358025180156520823413072717370881448687684998588495580963564077634519333318937728465474707385082627479533951393810494574785746993062525071542222199625057650772052526560745390577429516055513976017045062381044917320694766874808797643472144990481363265469613008522619087212042934225006176797135580068490719316043597087886519970083824931597787196259942472633187060706428510630254318048273086532982755020329157412358596831383334705896747662459774630394845340505659426012399804351136529464734765568149323886758445285348,\"H2i\":817887430421740313555814549558480861417955551888275652567964970938969666127662184410893523771197706812989414278781311040930294408989088966087803848144068244477590176440004700619645888697406696107130458992821047381012245171108814735680666940299791812774437551431904990798369394898932324307929566885922956333581091126956456497014103054027251565732485572270930193846637605984335672034833595851656804436158189178950384829857606971517271369070498349649356905481717227979421356737715727177284160822791319337205900722893948521007012123621933847613012939736849083424972669219229527860884485547408748257814358874549794532784,\"Alpha\":1434858477267495965473842832973175618226405665603752343621029047829059807558496764269563150588214897537543621243616740866786754226608693197887111703405210657722028060827373050671177832480016990675625378789923711548361969867013419417604005823274258656808392967046912338629386320442724105016743365604293495102364879277555983157098117042949156463606427522932279661928134704201439075676586718397087895348872395928110919681786574840861065961666978925304782818016990196985324140932999881799469920757323068154073755071216225203630869062775218214737393797552887553858394214231077921535887590181752467947282804281801460103792,\"Beta\":935838528582528130103391816955069654590188321666535089021465886837040982251836708984775115420934263684422130151116108929189777920879650174292221894289984639066813424466455449398886144677866940058342897237633715764478747192822690190328059922111559357933089237385540434230956911633891592425905442894861782392912998586034726306657237057833152679763128781532716398564707801764494923191674898389864344452702709675914918766467832159675887399310938110934278612498370419576896796078388577926014075903588839769468841521970114907243120460970744654505067048806583744389486123720858385658602239470107805250663496990115880489047,\"P\":69281090439490516652257046968533689749208990908096735949245173236267115631576125370546837738178971137766485520819291297126687372070719022323506895384236323611935283758133582376580049879747888990094462974570355440749578788740778865728888007752567427433705234042919109478816711991836715881678252091075177327163,\"Q\":70569634819178571662293976628658942319295164266000287264949103120668382235903107916191061127087211860691928906002562240361883017812285488457922024914697316895387533054385184653849876004758091224364361723911034808830350094558201582692981971406895582056922954203561689194208498897249288990717863341362699500111,\"Xi\":107628758274844146708165683984126482257098466452658832131145267526844079994076,\"ShareID\":102288921219266655542367836117428823569818830766977025458898056899198828038533,\"Ks\":[102288921219266655542367836117428823569818830766977025458898056899198828038533,102288921219266655542367836117428823569818830766977025458898056899198828038534,102288921219266655542367836117428823569818830766977025458898056899198828038535],\"NTildej\":[19556565008757318464194949480311209555878438371452206912307416756797636354416428370447936405388853302453426547303433877562432677540584202278616683676372548028863135601770435043302661145728533543998261615175416406282419406983259997564493983740013682617001839950241119463563380736760144786460822697960100706950076537141567252741516113958062287654036048849775342981752891915070525974031257607671577252867199978322171706574624638675430462209031089779845191013197421928441371584857803758995040295111761186109566076977916022372020418620892253559722608926889857101643429190887687736088287643100026292896346201527680560914921,25591841383664782236933100088330842620804742763961953901503273940091968954169382615862944703454176932800875660439634172288726476970659225643557583270716144334963956533777344548966818447158537368335682837448138797817220996515408405414133586419300436621917989302555853861737618815143229905630110904951152424094115688158739283777920987963661766451652584108638792879702550786133351914446295520218605911105343903809267141670761977123678814756090966961031223638784398427730668466409914226181803389121879684507352008022093993586567679415563412001488375363854010223960174471138552414355187415542383304243469978212853430744049,20040405524719563037250335376559225088080571633288097166986022852323380867624002697378372081049722680509492377992295237113613027610300121362949869363320635619533508574916435279196546089793196424440963235802911234218098481503035684288321421867988668241988594430112048009170775284479827006335171468775242686184752200322141282355670144727841100483144844086005740891184851018721027060261215233152453354520648736185326703990790753204141041174640215614462137203042671912925278571393595645062767648498223172231860161780856967410242305267408031418431814297514481682722568428014864104105897117686659389120729567666772298832257],\"H1j\":[5689956253672088159927439642440946065254368885886998836245333665584316970614135492685793985447694603043358025180156520823413072717370881448687684998588495580963564077634519333318937728465474707385082627479533951393810494574785746993062525071542222199625057650772052526560745390577429516055513976017045062381044917320694766874808797643472144990481363265469613008522619087212042934225006176797135580068490719316043597087886519970083824931597787196259942472633187060706428510630254318048273086532982755020329157412358596831383334705896747662459774630394845340505659426012399804351136529464734765568149323886758445285348,22311641136622415747460147365332404289573154587094382832961218358985027793566578229411108165690790552868712454926532405374889174220382384903151339061353072025917703559338119390298114342171833777801873497238080897363183503070698189639283178012708368413364293695766985160323280403853050391321260564636430721093762284263966237563476324981270206880058682118671873907272605247532406841320168740414949402749460864953378169491083945031500937833041581880631263118343129485588269430564586050011967445352782034008891153212985883175150868533669120296058748395497244900222400241939322252848555028383281365936969948756297514627748,12669125171234487275348726429359637064996482383465943384114812535740668572672514091376571503116777439388240756413577981706170581931196336666507233344929866883766297146204232906721460814450821049349492269483511494608342973066070835098415386203708572598758912156540796657821252422284474481690386727724154773003996125599854714619408168938003785307646875700780281354741260255156280596394692194136722595317549933382599008522848817112393208354944601524996480285184279653415217617524948994629169891993136849027230905791600855378000049043275810418164900220599318964954974794402102987277086011261288177693746371787726386446601],\"H2j\":[817887430421740313555814549558480861417955551888275652567964970938969666127662184410893523771197706812989414278781311040930294408989088966087803848144068244477590176440004700619645888697406696107130458992821047381012245171108814735680666940299791812774437551431904990798369394898932324307929566885922956333581091126956456497014103054027251565732485572270930193846637605984335672034833595851656804436158189178950384829857606971517271369070498349649356905481717227979421356737715727177284160822791319337205900722893948521007012123621933847613012939736849083424972669219229527860884485547408748257814358874549794532784,8143572510007195996269459519019042649319835082144335361519306848832945308733292841388712757048180655999187803821232882953851690137273420121323970049650618108515387816916481750304915566903591843164949186058060386335975050799687895890015966261343971291427125456144507006900030606985689374508734753847869334571509160949460475343463361171160077211632424974795842155092584168981357917716761848291585051689088079098969184453239920973417200474959292029703890785007996076603441692152227495594888143044311275061654744854053389226197324701523832963028480358922210412494682790545932129557736681576239382063797972341193100213400,10346757476703849355071418656569285071964214179812847816814312255405206512607896724538234495195370157187961634672843527349962380266027022591598328854253071705980358042058873383982943568767850158705522010535850823889176422935676645482177656988726510195301542524271687793764181967723949657781991554391048401818135414725491412723209878495949073157132130004505689259111928560783670191644891089230517270824799786521536412228291498501854089909586305820022989308755418652258426508352344465656071822510752826943133653067310416209988732084544526647954570946134988710679056479109525482973115992640094240797960830206499405189539],\"BigXj\":[{\"Curve\":\"secp256k1\",\"Coords\":[100324068088266379649760048164548967668648508374180807539027343556159731879564,35601970185166694674387624665420398047515845452553983710381652269770619541830]},{\"Curve\":\"secp256k1\",\"Coords\":[80608606384497084961320335724415856817561739803720534329647498700229947335324,114863194566175435776026286795534334607898074059344768201829757137270242597241]},{\"Curve\":\"secp256k1\",\"Coords\":[80553217834793350679300192368767917980111283759106446749614919894833066590394,8362504518522142050004162491298046806458311575021194942657495428719945664405]}],\"PaillierPKs\":[{\"N\":24326962348129444257903289709340209852956589208776769867346317647942302963898651566643785483036770962482702821230303697170627267174171307434716036965930556402408783406195990771671848350840673435291850723668018371437371380621806892528188913667777057292071480648528413968483561154297572396164576642470591931675056556378492219115608082372949002998327378156754457439898141538226717523618421222426306150940297245504115975978070857900123512676631463689979252040750833990896544004803836943344500562645522744868277752560521669403067405800829302450997818037247944441288611716201623933713901839918688537912219460984458346200173},{\"N\":26862592954896020948912594887645132023486087526477528482259965898937318574370481826056494728530699451565553482383428943998318774260639110463796596846931674359909980999243556168665605925967656149848363873496658657655946907509116036935040986364823844255286530243071556326089633140826906614138952981646617424881102550947674889458835539134205875763092649376840790824383330584846486011561271451586110486069089382669720621808634521246793012777692501509186974259101566127435390659788407921933470421904865445856304925159806975654856293037823416170874204821472318340347558028160029614443955863717430935782221680515752272811957},{\"N\":22512436012060215671472812821800657313447472325242164002512144449137992582573732835264194734480954961853049750370128938594375629871345582734240279534587394407940358170215254586950569349595884782846666564781076220599313461412802993341041389765581006910880308246437463986458976516994039798047281533969059478706939859322152704829122609738109378453989816774822241520909896224182611342349703338544568434539506233448219355660301834459531919772810848459511588306603832016895832437036901912572754193906712312830261662406143031284458844244464350900229514204146042341440401754366125887172825700297924730020913966207439837031161}],\"ECDSAPub\":{\"Curve\":\"secp256k1\",\"Coords\":[114692390252404631920721975160114450964954979939726467868912168336787895437073,61830956115913137496913776494889134845743794533455330148372571222756312139117]}}"
        sign.type = 1
        sign.chainId = data.chain_id.toInt()
        sign.chainUrl = data.chain_url
        sign.blockId = data.block_id
        sign.fromAddr = chainTokenInfo?.addr
        sign.toAddr = binding.etToAddress.text.toString()
        sign.transType = data.trans_type
        sign.contract = chainTokenInfo?.contract
        sign.token = tokenId.toString()
        sign.value = binding.etInputNum.text.toString()
        sign.middleContract = data.middle_contract
        Go23WalletManage.getInstance().sign(
            key1, Gson().toJson(sign).toByteArray()
        ) { response ->
            sendCoinResultDialog = SendCoinResultDialog(this, true, response.addr)
            sendCoinResultDialog?.show(supportFragmentManager, "sendCoinResultDialog")
        }
    }

    private fun updateSendStatus() {
        val inputStr = binding.etInputNum.text.toString()
        if (inputStr.isNullOrEmpty()) {
            return
        }
        val num = inputStr.toDouble()
        var totalValue = 1.0
        var availableNum = 0.0
        preTokenSend?.let {
            totalValue = num * (1 + it.fee)
            availableNum = if (tokenId == 0) it.platform_balance_sort else it.token_balance_sort
        }
        binding.tvTotalValue.text = "$totalValue ${chainTokenInfo?.symbol}"
        binding.tvSend.isEnabled = totalValue > 0 && totalValue <= availableNum && isSelectGas
    }
}